.data
	N:  .word 0         # Ввод количества элементов в массиве А
	A:  .space 40       # Массив A (максимум 10 элементов, 4 байта на элемент)
	B:  .space 40       # Массив B (максимум 10 элементов)
	# Текст в качестве подсказки для пользователя
	enterN: .asciz "Введите количество элементов в массиве "
	enter_element: .asciz "Введите элемент массива А "
	array_B_text: .asciz "Получившийся массив B: "
.text
main:
	la a0, enterN
	li a7, 4
	ecall

	# Ввод количества элементов
    	la a0, N
    	jal input_n

    	# Ввод массива А
    	jal input_array

    	# Формирование массива B
    	jal form_array

	la a0, array_B_text
	li a7, 4
	ecall 
    	# Вывод массива B
    	jal output_array

    	# Завершение программы
    	li a7, 10        
    	ecall

# Подпрограмма input_n - Ввод размера массива N с учетом маскимального количества
input_n:
    	li t0, 0         # Сохраним введённое значения N
input_n_loop:
    	li a7, 5         # Системный вызов для чтения целого числа
    	ecall
    	mv t0, a0        # Сохраним введённое значение в t0

    	li t1, 1         # Нижняя граница (1)
    	li t2, 10        # Верхняя граница (10)
    	blt t0, t1, input_n_error # Если N < 1, выводим ошибку
    	bgt t0, t2, input_n_error # Если N > 10, выводим ошибку

    	la t3, N	
    	sw t0, 0(t3)        # Сохраним корректное значение N
    	ret

input_n_error:
    	# Обработка ошибок
    	li a0, 10        # Новая строка
    	li a7, 11        # Вывод
    	ecall
    	# Повторный ввод N
    	j input_n_loop

# Подпрограмма input_array - Ввод массива A
input_array:
    	la t0, A         # Адрес массива A
    	li t1, 0         # Индекс массива
input_loop:
	la a0, enter_element
	li a7, 4
	ecall
	
    	li a7, 5         # Системный вызов для чтения целого числа
    	ecall
    	sw a0, 0(t0)     # Сохранить введенное значение в массив A
    	addi t0, t0, 4   # Увеличить адрес для следующего элемента
    	addi t1, t1, 1   # Увеличить индекс
    	lw t2, N         # Загрузить значение N
    	blt t1, t2, input_loop
    	ret

# Подпрограмма form_array - Формирование массива B
form_array:
    	la t0, A         # Адрес массива A
    	la t1, B         # Адрес массива B
    	li t2, 0         # Индекс массива
form_loop:
    	lw t3, 0(t0)     # Загрузить элемент из массива A
    	li t4, 10
    	rem t5, t3, t4   # Остаток от деления на 10 (последняя цифра)
    	li t6, 4
    	beq t5, t6, halve_value # Если последняя цифра 4, уменьшить вдвое
    	j store_value
halve_value:
    	srai t3, t3, 1   # Уменьшить значение вдвое
store_value:
    	sw t3, 0(t1)     # Сохранить элемент в массив B
    	addi t0, t0, 4   # Перейти к следующему элементу массива A
    	addi t1, t1, 4   # Перейти к следующему элементу массива B
    	addi t2, t2, 1   # Увеличить индекс
    	lw t4, N         # Загрузить значение N
    	blt t2, t4, form_loop
    	ret

# Подпрограмма output_array - Вывод массива B
output_array:
    	la t0, B         # Адрес массива B
    	li t1, 0         # Индекс массива
output_loop:
    	lw a0, 0(t0)     # Загрузить элемент из массива B
    	li a7, 1         # Системный вызов для вывода целого числа
    	ecall
    	li a0, 32        # Печать пробела между числами
    	li a7, 11
    	ecall
    	addi t0, t0, 4   # Перейти к следующему элементу массива B
    	addi t1, t1, 1   # Увеличить индекс
    	lw t2, N         # Загрузить значение N
    	blt t1, t2, output_loop
    	ret